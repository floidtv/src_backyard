ProdList.update( { _id: '8BN93JnyiNwdKKoaB' }, { $push: {'sprecherTermin.einsprecher: {'name': 'Dennis'}}})

ProdList.update( { _id: '8BN93JnyiNwdKKoaB' }, { $push: {"sprecherTermin.einsprecher": {"name": "Dennis"}}})

            ProdList.update(
                {_id: prodIDVar, 'sprecherTermin._id': myArray[i]},
                {$set: {'sprecherTermin.$.start': speakerDateVar}}
            );

    <iframe src="http://bratu-marian.ro/bm/lsh/skybundesliga7.htm" scrolling="no" width="100%" height="400"></iframe>

            prodDate: {_id: Random.id(), title: proTitleVar, allday: true, start:proDateVar, color: '#D01919', categoie: 'production'},
            treatmentDate: {_id: Random.id(), title: 'Treatment '+proTitleVar, allday: true, start: '', color: '#F26202', categorie: 'treatment'},

            Undefinde Elemente ENtfernen
            Array_.compact([])


Hi guys, i'm sitting for two days on a problem that i can't solve yet with any examples i'd found. I've tested many things but nothing work for me right... also it is to say that i'm a beginner in meteor programming, so don't be too hard :-/

Following code: I have a template where users can type in dates in a form and press a submit button. Now i want to check if this typed in date already exists in collection. When it exists an alert will popup. Simultaneously i want check if user update a existing date or create a new one.

Client.js

    var currData = {_id: speakerDateArray[i]._id,
                            prID: prodIDVar,
                            title: currTitle,
                            start: speakerDateStartVar,
                            end: speakerDateEndVar};
    if(allSpeakerDates.length == 0){
           Meteor.call('insertSpeakerDate', currData);
    }
    else {
    Meteor.call('delayedDateCompare', currData, function(err, result){
         var isDateExists = result;
         console.log(err + ' ' +result);

         if(isDateExists === true) {
             var isIdExists = Events.findOne({_id: speakerDateArray[i]._id});
             if(isIdExists !== undefined){
                  console.log('ID vorhanden --> update');
                  Meteor.call('updateSpeakerDate', currData);
             }
             else {
                  alert('date already exist');
             }
          }
          else {
             var isIdExists = Events.findOne({_id: speakerDateArray[i]._id});
             if(isIdExists !== undefined){
                  console.log('ID exists --> update');
                  Meteor.call('updateSpeakerDate', currData);
              }
              else {
                   console.log('ID not exist --> insert');
                   Meteor.call('insertSpeakerDate', currData);
              }
           }
    });

Server.js

    function compareDates(delay, data, callback) {
            var tmpStart = moment(data.start).toDate();
            var tmpEnd = moment(data.end).toDate();
            var allSpeakerDates = Events.find({categorie: 'speaker'}).fetch();
            var result;
            for(i=0; i<allSpeakerDates.length; i++) {
                var exStart = moment(allSpeakerDates[i].start).toDate();
                var exEnd = moment(allSpeakerDates[i].end).toDate();

                if (tmpStart > exStart && tmpEnd < exEnd) {
                    console.log('status 1');
                    result = true;
                }
                else if(tmpStart < exStart && tmpEnd > exStart) {
                    console.log('status 2');
                    result = true;
                }
                else if(tmpStart < exEnd && tmpEnd > exEnd) {
                    console.log('status 3');
                    result = true;
                }
                else {
                    console.log('status 4');
                    result = false;
                }
            }
            setTimeout(function() {
                callback(null, result);
            }, delay);
        }
        var wrappedCompareDates = Async.wrap(compareDates);

//Methodes

    Meteor.methods({
            'insertSpeakerDate': function(data){
                Events.insert({
                    _id: data._id,
                    prID: data.prID,
                    title: data.title,
                    start: data.start,
                    end: data.end,
                    color: '#009C95',
                    categorie: 'speaker'
                });
            },
            'updateSpeakerDate': function(data) {
                console.log('Speakerdate updated: '+data._id);
                Events.update({_id: data._id}, {
                    $set: {
                        title: data.title,
                        start: data.start,
                        end: data.end
                    }
                });
            },
            'delayedDateCompare': function(data) {
                var response = wrappedCompareDates(1000, data);
                return response;
            },

Code incl. if-else check runs good so far but i got the damn error "Exception in delivering result of invoking 'delayedDateCompare'". i think this is due to the async-functionality of meteor but how can i fix it?
Hope you can help! Thx
